{"ast":null,"code":"// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n// Individual reducers altogether under an alias;\n\nimport * as reducers from '../reducers'; //persist redox state in local storeage\n\nvar persistConfig = {\n  key: 'root',\n  storage: storage // Construct our Redux store;\n\n};\nvar rootReducer = combineReducers(reducers);\nvar logger = createLogger({\n  collapsed: true\n});\nvar middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nvar store = createStore(rootReducer, middleware);\nvar persistedReducer = persistReducer(persistConfig, rootReducer); // Export our store by default, which will be provided to and injected within our entire application;\n\nexport default (function () {\n  var store = createStore(persistedReducer);\n  var persistor = persistStore(store);\n  return {\n    store: store,\n    persistor: persistor\n  };\n});","map":{"version":3,"sources":["/Users/mohamedshafee/Documents/TTP/CRUD/CRUD-Front-End/src/store/index.js"],"names":["combineReducers","applyMiddleware","createStore","createLogger","thunkMiddleware","composeWithDevTools","persistStore","persistReducer","storage","reducers","persistConfig","key","rootReducer","logger","collapsed","middleware","store","persistedReducer","persistor"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAgD;AAEhD;;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B,C,CAEA;;AACA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBH,EAAAA,OAAO,EAAPA,OAFoB,CAKtB;;AALsB,CAAtB;AAMA,IAAMI,WAAW,GAAGZ,eAAe,CAACS,QAAD,CAAnC;AACA,IAAMI,MAAM,GAAGV,YAAY,CAAC;AAAEW,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B;AACA,IAAMC,UAAU,GAAGV,mBAAmB,CAACJ,eAAe,CAACG,eAAD,EAAkBS,MAAlB,CAAhB,CAAtC;AACA,IAAMG,KAAK,GAAGd,WAAW,CAACU,WAAD,EAAcG,UAAd,CAAzB;AAEA,IAAME,gBAAgB,GAAGV,cAAc,CAACG,aAAD,EAAgBE,WAAhB,CAAvC,C,CAEA;;AACA,gBAAe,YAAM;AACnB,MAAII,KAAK,GAAGd,WAAW,CAACe,gBAAD,CAAvB;AACA,MAAIC,SAAS,GAAGZ,YAAY,CAACU,KAAD,CAA5B;AACA,SAAO;AAAEA,IAAAA,KAAK,EAALA,KAAF;AAASE,IAAAA,SAAS,EAATA;AAAT,GAAP;AACD,CAJD","sourcesContent":["// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\n// Individual reducers altogether under an alias;\nimport * as reducers from '../reducers';\n\n//persist redox state in local storeage\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\n// Construct our Redux store;\nconst rootReducer = combineReducers(reducers);\nconst logger = createLogger({ collapsed: true });\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger,));\nconst store = createStore(rootReducer, middleware);\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default () => {\n  let store = createStore(persistedReducer)\n  let persistor = persistStore(store)\n  return { store, persistor }\n}\n\n"]},"metadata":{},"sourceType":"module"}