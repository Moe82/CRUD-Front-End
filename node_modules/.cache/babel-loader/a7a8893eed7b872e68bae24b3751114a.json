{"ast":null,"code":"// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // Individual reducers altogether under an alias;\n\nimport * as reducers from '../reducers'; //persist state in localstorage \n\nvar loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nvar saveState = function saveState(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {// Ignore write errors;\n  }\n};\n\nvar peristedState = loadState();\nstore.subscribe(function () {\n  saveState(store.getState());\n}); // Construct our Redux store;\n\nvar rootReducer = combineReducers(reducers);\nvar logger = createLogger({\n  collapsed: true\n});\nvar middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nvar store = createStore(rootReducer, middleware, peristedState); // Export our store by default, which will be provided to and injected within our entire application;\n\nexport default store;","map":{"version":3,"sources":["/Users/mohamedshafee/Documents/TTP/CRUD/CRUD-Front-End/src/store/index.js"],"names":["combineReducers","applyMiddleware","createStore","createLogger","thunkMiddleware","composeWithDevTools","reducers","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","e","saveState","state","stringify","setItem","peristedState","store","subscribe","getState","rootReducer","logger","collapsed","middleware"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAI;AACF,QAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAxB;;AACA,QAAGF,eAAe,KAAK,IAAvB,EAA6B;AAC3B,aAAOG,SAAP;AACD;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAWL,eAAX,CAAP;AACD,GAND,CAME,OAAOM,CAAP,EAAU;AACV,WAAOH,SAAP;AACD;AACF,CAVD;;AAYA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAC3B,MAAI;AACF,QAAMR,eAAe,GAAGI,IAAI,CAACK,SAAL,CAAeD,KAAf,CAAxB;AACAP,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BV,eAA9B;AACD,GAHD,CAGE,OAAOM,CAAP,EAAU,CACV;AACD;AACF,CAPD;;AASA,IAAMK,aAAa,GAAGZ,SAAS,EAA/B;AAEAa,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpBN,EAAAA,SAAS,CAACK,KAAK,CAACE,QAAN,EAAD,CAAT;AACD,CAFD,E,CAIA;;AACA,IAAMC,WAAW,GAAGvB,eAAe,CAACM,QAAD,CAAnC;AACA,IAAMkB,MAAM,GAAGrB,YAAY,CAAC;AAAEsB,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B;AACA,IAAMC,UAAU,GAAGrB,mBAAmB,CAACJ,eAAe,CAACG,eAAD,EAAkBoB,MAAlB,CAAhB,CAAtC;AACA,IAAMJ,KAAK,GAAGlB,WAAW,CAACqB,WAAD,EAAcG,UAAd,EAA0BP,aAA1B,CAAzB,C,CAEA;;AACA,eAAeC,KAAf","sourcesContent":["// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Individual reducers altogether under an alias;\nimport * as reducers from '../reducers';\n\n//persist state in localstorage \nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if(serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    // Ignore write errors;\n  }\n};\n\nconst peristedState = loadState();\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\n// Construct our Redux store;\nconst rootReducer = combineReducers(reducers);\nconst logger = createLogger({ collapsed: true });\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, middleware, peristedState);\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}