{"ast":null,"code":"// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // Individual reducers altogether under an alias;\n\nimport * as reducers from '../reducers'; //persist redox state in local storeage. \n\nfunction saveToLocalStorage(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction loadFromLocalStorage() {\n  try {\n    var serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n}\n\nvar persistedState = loadFromLocalStorage();\nvar sagaMiddleware = createSagaMiddleware(); // Construct our Redux store;\n\nvar rootReducer = combineReducers(reducers);\nvar logger = createLogger({\n  collapsed: true\n});\nvar middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nvar store = createStore(rootReducer, persistedState, applyMiddleware(logger, sagaMiddleware, middleware));\nsagaMiddleware.run(watchLoadData);\nstore.subscribe(function () {\n  return saveToLocalStorage(store.getState());\n}); // Export our store by default, which will be provided to and injected within our entire application;\n\nexport default store;","map":{"version":3,"sources":["/Users/mohamedshafee/Documents/TTP/CRUD/CRUD-Front-End/src/store/index.js"],"names":["combineReducers","applyMiddleware","createStore","createLogger","thunkMiddleware","composeWithDevTools","reducers","saveToLocalStorage","state","serializedState","JSON","stringify","localStorage","setItem","err","console","log","loadFromLocalStorage","getItem","undefined","parse","persistedState","sagaMiddleware","createSagaMiddleware","rootReducer","logger","collapsed","middleware","store","run","watchLoadData","subscribe","getState"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B,C,CAEA;;AACA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,MAAI;AACF,QAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,eAA9B;AACD,GAHD,CAGE,OAAOK,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,SAASG,oBAAT,GAAgC;AAC9B,MAAI;AACF,QAAMR,eAAe,GAAGG,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAxB;AACA,QAAIT,eAAe,KAAK,IAAxB,EAA8B,OAAOU,SAAP;AAC9B,WAAOT,IAAI,CAACU,KAAL,CAAWX,eAAX,CAAP;AACD,GAJD,CAIE,OAAOK,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAOK,SAAP;AACD;AACF;;AAED,IAAME,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,IAAMK,cAAc,GAAGC,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMC,WAAW,GAAGxB,eAAe,CAACM,QAAD,CAAnC;AACA,IAAMmB,MAAM,GAAGtB,YAAY,CAAC;AAAEuB,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B;AACA,IAAMC,UAAU,GAAGtB,mBAAmB,CAACJ,eAAe,CAACG,eAAD,EAAkBqB,MAAlB,CAAhB,CAAtC;AACA,IAAMG,KAAK,GAAG1B,WAAW,CACvBsB,WADuB,EAEvBH,cAFuB,EAGvBpB,eAAe,CAACwB,MAAD,EAASH,cAAT,EAAyBK,UAAzB,CAHQ,CAAzB;AAIAL,cAAc,CAACO,GAAf,CAAmBC,aAAnB;AAEAF,KAAK,CAACG,SAAN,CAAgB;AAAA,SAAMxB,kBAAkB,CAACqB,KAAK,CAACI,QAAN,EAAD,CAAxB;AAAA,CAAhB,E,CAEA;;AACA,eAAeJ,KAAf","sourcesContent":["// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Individual reducers altogether under an alias;\nimport * as reducers from '../reducers';\n\n//persist redox state in local storeage. \nfunction saveToLocalStorage(state) {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nfunction loadFromLocalStorage() {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.log(err)\n    return undefined;\n  }\n}\n\nconst persistedState = loadFromLocalStorage();\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// Construct our Redux store;\nconst rootReducer = combineReducers(reducers);\nconst logger = createLogger({ collapsed: true });\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  applyMiddleware(logger, sagaMiddleware, middleware))\nsagaMiddleware.run(watchLoadData);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()))\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}