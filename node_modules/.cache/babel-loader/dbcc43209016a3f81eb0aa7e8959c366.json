{"ast":null,"code":"// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // Individual reducers altogether under an alias;\n\nimport * as reducers from '../reducers'; //persist state in localstorage \n// Construct our Redux store;\n\nvar rootReducer = combineReducers(reducers);\nvar logger = createLogger({\n  collapsed: true\n});\nvar middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nvar store = createStore(rootReducer, middleware); // Export our store by default, which will be provided to and injected within our entire application;\n\nexport default store;","map":{"version":3,"sources":["/Users/mohamedshafee/Documents/TTP/CRUD/CRUD-Front-End/src/store/index.js"],"names":["combineReducers","applyMiddleware","createStore","createLogger","thunkMiddleware","composeWithDevTools","reducers","rootReducer","logger","collapsed","middleware","store"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B,C,CAEA;AAGA;;AACA,IAAMC,WAAW,GAAGP,eAAe,CAACM,QAAD,CAAnC;AACA,IAAME,MAAM,GAAGL,YAAY,CAAC;AAAEM,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B;AACA,IAAMC,UAAU,GAAGL,mBAAmB,CAACJ,eAAe,CAACG,eAAD,EAAkBI,MAAlB,CAAhB,CAAtC;AACA,IAAMG,KAAK,GAAGT,WAAW,CAACK,WAAD,EAAcG,UAAd,CAAzB,C,CAEA;;AACA,eAAeC,KAAf","sourcesContent":["// Necessities and accessories for constructing our Redux store;\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Individual reducers altogether under an alias;\nimport * as reducers from '../reducers';\n\n//persist state in localstorage \n\n\n// Construct our Redux store;\nconst rootReducer = combineReducers(reducers);\nconst logger = createLogger({ collapsed: true });\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, middleware);\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}